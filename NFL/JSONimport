import requests
import json
import pandas as pd

#imports the JSON from the url file and saves it as the parsed file
url = 'http://www.nfl.com/liveupdate/game-center/2017083151/2017083151_gtd.json?random=15042941'
r = requests.get(url)
gamejson = json.loads(r.content)

#tries to print json so it's easy to read
#json.dumps(parsed, indent=4, sort_keys=True)

#gets game id for future reference
gameid = list(gamejson.keys())[0]

#creates gamekeys dataframe for future reference
gamekeys = pd.DataFrame(list(gamejson[gameid].keys()),columns=['gamekeys'])

#Most valuble keys are home, away, and drives
###find a way to collect matchup information such as date, time, weather, week#, 

#start collecting home team data
homedict = gamejson[gameid]['home']
homekeys = pd.DataFrame(list(homedict.keys()),columns=['homekeys'])
hometeam = homedict['abbr']
homedata = pd.DataFrame.from_dict(homedict)
print(homedata)

homedict.values()

gamekeys = pd.DataFrame.from_dict(gamejson[gameid])
print(gamekeys)


#begin looking at the drives of the JSON file
#uses the gamejson object and game id to select the correct JSON file and the 'drives' layer for drive info
#since it's essentially a dictionary, it needs to look at the .items and turn it to a list to iterate over
drives = list(gamejson[gameid]['drives'].items())
print(drives)

#See Summary below for info on looping and indexes from the JSON
#first index is to the drive, second index is the info, 3rd is to get to the plays
#cannot get any deeper because now looking at another dictionary
#4th index is the play of the drive, 5th is the info from the play, 6th is to get the players
#cannot get any deeper because now looking at another dictonary
#7th index is the player of the play, 8th index is the info from the player
#9th index is the stat of the player, 10th index is the label of the info on the play
#list(list(drives[0][1]['plays'].items())[0][1]['players'].items())[0][1][0]['playerName']

#creates the playerstatdf where all data will be stored for analysis later
playerstatdf = pd.DataFrame()

#loops through all of the drives
for drive in drives[0:2]:
    
    #creates the list of plays for the drive
    driveplays = list(drive[1]['plays'].items())
    
    #loops through all of the plays in the drive    
    for play in driveplays:
        
        #creates the list of players involved on the play
        playplayers = list(play[1]['players'].items())
            
        #loops through all of the players involved on the play        
        for player in playplayers:
            
            #if the player is '0' this indicates a teamstat situation
            if player[0] == '0':
                
                print('TEAM STAT')
                
                teamstatteam = player[1]['clubcode']
                
                
            else
                
                #look into applying this data to the applicable player
                #possibly remove the continue and have the stat logged normally
                teamstat = None
                
                continue
            
            #loops through all of the stats for the player on the play
            for playerstat in player[1]:
                
                #appends info the the playerstatdf for additional consumption later
                playerstatdf = playerstatdf.append({'team' : playerstat['clubcode'], \
                                                    'playerName' : playerstat['playerName'], \
                                                    'statId' : playerstat['statId'], \
                                                    'yards' : playerstat['yards']}, \
                                                    ignore_index = True)
                                                    
                                                    #add info about the drive #, play # etc.







driveplays = list(test[1]['plays'].items())
    
    #finds the quarter and time of the game that the play occured
    #need to loop through the plays automatically instead of using '36'
    #qtr = plays['36']['qtr']
    #time = plays['36']['time']



#begin looking at the individual plays in the drives
#need to loop through the drives automatically instead of using '1'
plays = drives['1']['plays']

#finds the quarter and time of the game that the play occured
#need to loop through the plays automatically instead of using '36'
qtr = plays['36']['qtr']
time = plays['36']['time']

play = plays[]
plays['36']['players']

    
    print(player_play)
    

playerid = list(plays['36']['players'])[0]
player_play = list(plays['36']['players'][playerid])

player_play = plays['36']['players']



#begin to loop through plays in drive and all drives (2 separate)

    #loops through each layer of the players involved in the play
    for playerid in player_play.items():
    
        #need if statement for when playerid = 0 to append situational value to team
        if playerid[0] == '0':
            
            #skip for now
            continue
            #identify all offense and defense stats that can be applied to individual players
            #need to make a play start stat ie: 3rd down attempt
            #need to make a play result stat ie: first down conversion
            #identify which are kickoff type stats which are not applicable
        print(playerid[0])
        
        print(playerid[1][0]['clubcode'])
    
        #loops through all player actions in the list, must look at second level to get values
        for playeraction in playerid[1]:
        
            #try to keep data tidy for manipulation later on, start long and go wide
            #copy from other NFL info to create dataframe
            statid = playeraction['statId']
            playername = playeraction['playerName']
            team = playeraction['clubcode']
            yards = playeraction['yards']


dflist[0]

print(statid['sequence' == '1'])



posteam = drives['1']['posteam']





drivesdf = pd.DataFrame.from_dict(drives)
print(drivesdf)

len(testdict)
testdict.keys()
testdict.values()


from pandas.io.json import json_normalize

testdf = json_normalize(gamejson)
pd.read_json(gamejson)
train = pd.DataFrame.from_dict(gamejson)
testdf = pd.DataFrame.from_dict(gamejson)